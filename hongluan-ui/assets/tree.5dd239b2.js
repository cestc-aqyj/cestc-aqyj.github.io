var e=Object.defineProperty,n=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,t=Object.prototype.propertyIsEnumerable,l=(n,d,t)=>d in n?e(n,d,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[d]=t,a=(e,a)=>{for(var o in a||(a={}))d.call(a,o)&&l(e,o,a[o]);if(n)for(var o of n(a))t.call(a,o)&&l(e,o,a[o]);return e};import{H as o,o as r,C as c,D as i,v as s,P as h,at as p,_ as u,as as b}from"./vue.69b6befa.js";import{_ as f}from"./index.6da685a4.js";import"./hongluan.17b69477.js";import"./highlight.5ad4a187.js";import"./hongluan-icons.f9afdbe4.js";const g={name:"component-doc",components:{"hl-demo0":function(){const{resolveComponent:e,openBlock:n,createBlock:d}=p;const{defineComponent:t,ref:l}=p,o=t({setup:()=>({data:l([{label:"一级 1",children:[{label:"二级 1-1",children:[{label:"三级 1-1-1"}]}]},{label:"一级 2",children:[{label:"二级 2-1",children:[{label:"三级 2-1-1"}]},{label:"二级 2-2",children:[{label:"三级 2-2-1"}]}]},{label:"一级 3",children:[{label:"二级 3-1",children:[{label:"三级 3-1-1"}]},{label:"二级 3-2",children:[{label:"三级 3-2-1"}]}]}]),defaultProps:l({children:"children",label:"label"}),handleNodeClick:e=>{console.log(e)}})});return a({render:function(t,l){const a=e("hl-tree");return n(),d(a,{data:t.data,props:t.defaultProps,onNodeClick:t.handleNodeClick},null,8,["data","props","onNodeClick"])}},o)}(),"hl-demo1":function(){const{resolveComponent:e,openBlock:n,createBlock:d}=p;const{defineComponent:t,ref:l}=p,o=t({setup(){const e=l({label:"name",children:"zones"}),n=l(1);return{props:e,count:n,handleCheckChange:(e,n,d)=>{console.log(e,n,d)},handleNodeClick:e=>{console.log(e)},loadNode:(e,d)=>{return 0===e.level?d([{name:"region1"},{name:"region2"}]):e.level>3?d([]):(t="region1"===e.data.name||"region2"!==e.data.name&&Math.random()>.5,void setTimeout((()=>{var e;e=t?[{name:"zone"+n.value++},{name:"zone"+n.value++}]:[],d(e)}),500));var t}}}});return a({render:function(t,l){const a=e("hl-tree");return n(),d(a,{props:t.props,load:t.loadNode,lazy:"","show-checkbox":"",onCheckChange:t.handleCheckChange},null,8,["props","load","onCheckChange"])}},o)}(),"hl-demo2":function(){const{resolveComponent:e,openBlock:n,createBlock:d}=p;const{defineComponent:t,ref:l}=p,o=t({setup:()=>({props:l({label:"name",children:"zones",isLeaf:"leaf"}),loadNode:(e,n)=>0===e.level?n([{name:"region"}]):e.level>1?n([]):void setTimeout((()=>{n([{name:"leaf",leaf:!0},{name:"zone"}])}),2e3)})});return a({render:function(t,l){const a=e("hl-tree");return n(),d(a,{props:t.props,load:t.loadNode,lazy:"","show-checkbox":""},null,8,["props","load"])}},o)}(),"hl-demo3":function(){const{resolveComponent:e,openBlock:n,createBlock:d}=p;const{defineComponent:t,ref:l}=p,o=t({setup:()=>({data:l([{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}]),defaultProps:l({children:"children",label:"label"})})});return a({render:function(t,l){const a=e("hl-tree");return n(),d(a,{data:t.data,"show-checkbox":"","node-key":"id","default-expanded-keys":[2,3],"default-checked-keys":[5],props:t.defaultProps},null,8,["data","props"])}},o)}(),"hl-demo4":function(){const{resolveComponent:e,openBlock:n,createBlock:d}=p;const{defineComponent:t,ref:l}=p,o=t({setup:()=>({data:l([{id:1,label:"一级 2",children:[{id:3,label:"二级 2-1",children:[{id:4,label:"三级 3-1-1"},{id:5,label:"三级 3-1-2",disabled:!0}]},{id:2,label:"二级 2-2",disabled:!0,children:[{id:6,label:"三级 3-2-1"},{id:7,label:"三级 3-2-2",disabled:!0}]}]}]),defaultProps:l({children:"children",label:"label"})})});return a({render:function(t,l){const a=e("hl-tree");return n(),d(a,{data:t.data,"show-checkbox":"","node-key":"id","default-expanded-keys":[2,3],"default-checked-keys":[5]},null,8,["data"])}},o)}(),"hl-demo5":function(){const{resolveComponent:e,createVNode:n,createTextVNode:d,withCtx:t,createElementVNode:l,Fragment:o,openBlock:r,createElementBlock:c}=p,i={class:"buttons"},s=d("通过 node 获取"),h=d("通过 key 获取"),u=d("通过 node 设置"),b=d("通过 key 设置"),f=d("清空");const{defineComponent:g,ref:k}=p,m=g({setup(){const e=k([{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}]),n=k({children:"children",label:"label"}),d=k(null);return{tree:d,data:e,defaultProps:n,getCheckedNodes:()=>{console.log(d.value.getCheckedNodes())},getCheckedKeys:()=>{console.log(d.value.getCheckedKeys())},setCheckedNodes:()=>{d.value.setCheckedNodes([{id:5,label:"二级 2-1"},{id:9,label:"三级 1-1-1"}])},setCheckedKeys:()=>{d.value.setCheckedKeys([3])},resetChecked:()=>{d.value.setCheckedKeys([])}}}});return a({render:function(d,a){const p=e("hl-tree"),g=e("hl-button");return r(),c(o,null,[n(p,{data:d.data,"show-checkbox":"","default-expand-all":"","node-key":"id",ref:"tree","highlight-current":"",props:d.defaultProps},null,8,["data","props"]),l("div",i,[n(g,{onClick:d.getCheckedNodes},{default:t((()=>[s])),_:1},8,["onClick"]),n(g,{onClick:d.getCheckedKeys},{default:t((()=>[h])),_:1},8,["onClick"]),n(g,{onClick:d.setCheckedNodes},{default:t((()=>[u])),_:1},8,["onClick"]),n(g,{onClick:d.setCheckedKeys},{default:t((()=>[b])),_:1},8,["onClick"]),n(g,{onClick:d.resetChecked},{default:t((()=>[f])),_:1},8,["onClick"])])],64)}},m)}(),"hl-demo6":function(){const{createElementVNode:e,resolveComponent:n,createVNode:d,withCtx:t,toDisplayString:l,openBlock:o,createElementBlock:r}=p,c={class:"custom-tree-container"},i={class:"block"},s=e("p",null,"使用 render-content",-1),h={class:"block"},u=e("p",null,"使用 slot",-1),b=["onClick"],f=["onClick"];const{defineComponent:g,ref:k}=p,m=g({setup(){let e=1e3;const n=k([{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}]),d=n=>{const d={id:e++,label:"testtest",children:[]};n.children||(n.children=[]),n.children.push(d)},t=(e,n)=>{const d=e.parent,t=d.data.children||d.data,l=t.findIndex((e=>e.id==e.id));t.splice(l,1)};return{data:n,append:d,remove:t,renderContent:(e,{node:n,data:l,store:a})=>e("span",{class:"custom-tree-node"},e("span",null,n.label),e("span",null,e("a",{onClick:()=>d(l)},"Append "),e("a",{onClick:()=>t(n)},"Delete")))}}});return a({render:function(a,p){const g=n("hl-tree"),k=n("two-folder"),m=n("hl-icon"),C=n("hl-group");return o(),r("div",c,[e("div",i,[s,d(g,{data:a.data,"show-checkbox":"","node-key":"id","default-expand-all":"","expand-on-click-node":!1,"render-content":a.renderContent},null,8,["data","render-content"])]),e("div",h,[u,d(g,{data:a.data,"show-checkbox":"","node-key":"id","default-expand-all":"","expand-on-click-node":!1},{default:t((({node:n,data:o})=>[d(C,{full:"",gap:"var(--xs)",align:"between"},{default:t((()=>[d(m,{size:"xs",class:"static"},{default:t((()=>[d(k)])),_:1}),e("span",null,l(n.label),1),d(C,{gap:"var(--md)",class:"static"},{default:t((()=>[e("a",{onClick:e=>a.append(o)}," Append ",8,b),e("a",{onClick:e=>a.remove(n,o)}," Delete ",8,f)])),_:2},1024)])),_:2},1024)])),_:1},8,["data"])])])}},m)}(),"hl-demo7":function(){const{resolveComponent:e,createVNode:n,Fragment:d,openBlock:t,createElementBlock:l}=p;const{defineComponent:o,ref:r,watch:c}=p,i=o({setup(){const e=r(""),n=r(null),d=r([{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}]),t=r({children:"children",label:"label"});return c(e,(e=>{n.value.filter(e)})),{data:d,tree:n,defaultProps:t,filterText:e,filterNode:(e,n)=>!e||-1!==n.label.indexOf(e)}}});return a({render:function(a,o){const r=e("hl-input"),c=e("hl-tree");return t(),l(d,null,[n(r,{placeholder:"输入关键字进行过滤",modelValue:a.filterText,"onUpdate:modelValue":o[0]||(o[0]=e=>a.filterText=e)},null,8,["modelValue"]),n(c,{class:"filter-tree",data:a.data,props:a.defaultProps,"default-expand-all":"","filter-node-method":a.filterNode,ref:"tree"},null,8,["data","props","filter-node-method"])],64)}},i)}(),"hl-demo8":function(){const{resolveComponent:e,openBlock:n,createBlock:d}=p;const{defineComponent:t,ref:l}=p,o=t({setup:()=>({data:l([{label:"一级 1",children:[{label:"二级 1-1",children:[{label:"三级 1-1-1"}]}]},{label:"一级 2",children:[{label:"二级 2-1",children:[{label:"三级 2-1-1"}]},{label:"二级 2-2",children:[{label:"三级 2-2-1"}]}]},{label:"一级 3",children:[{label:"二级 3-1",children:[{label:"三级 3-1-1"}]},{label:"二级 3-2",children:[{label:"三级 3-2-1"}]}]}]),defaultProps:l({children:"children",label:"label"}),handleNodeClick:e=>{console.log(e)}})});return a({render:function(t,l){const a=e("hl-tree");return n(),d(a,{data:t.data,props:t.defaultProps,accordion:"",onNodeClick:t.handleNodeClick},null,8,["data","props","onNodeClick"])}},o)}(),"hl-demo9":function(){const{resolveComponent:e,openBlock:n,createBlock:d}=p;const{defineComponent:t,ref:l}=p,o=t({setup:()=>({data:l([{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2",children:[{id:11,label:"三级 3-2-1"},{id:12,label:"三级 3-2-2"},{id:13,label:"三级 3-2-3"}]}]}]),defaultProps:l({children:"children",label:"label"}),handleDragStart:(e,n)=>{console.log("drag start",e)},handleDragEnter:(e,n,d)=>{console.log("tree drag enter: ",n.label)},handleDragLeave:(e,n,d)=>{console.log("tree drag leave: ",n.label)},handleDragOver:(e,n,d)=>{console.log("tree drag over: ",n.label)},handleDragEnd:(e,n,d,t)=>{console.log("tree drag end: ",n&&n.label,d)},handleDrop:(e,n,d,t)=>{console.log("tree drop: ",n.label,d)},allowDrop:(e,n,d)=>"二级 3-1"!==n.data.label||"inner"!==d,allowDrag:e=>-1===e.data.label.indexOf("三级 3-2-2")})});return a({render:function(t,l){const a=e("hl-tree");return n(),d(a,{data:t.data,"node-key":"id","default-expand-all":"",onNodeDragStart:t.handleDragStart,onNodeDragEnter:t.handleDragEnter,onNodeDragLeave:t.handleDragLeave,onNodeDragOver:t.handleDragOver,onNodeDragEnd:t.handleDragEnd,onNodeDrop:t.handleDrop,draggable:"","allow-drop":t.allowDrop,"allow-drag":t.allowDrag},null,8,["data","onNodeDragStart","onNodeDragEnter","onNodeDragLeave","onNodeDragOver","onNodeDragEnd","onNodeDrop","allow-drop","allow-drag"])}},o)}()}},k={class:"doc-main-content"},m={class:"doc-content"},C=i("h1",null,"Tree 树形控件",-1),v=i("p",null,"用清晰的层级结构展示信息，可展开或折叠。",-1),y=i("pre",null,[i("code",{class:"html"},"<template>\n  <hl-tree :data=\"data\" :props=\"defaultProps\" @node-click=\"handleNodeClick\"></hl-tree>\n</template>\n\n<script>\n  import { defineComponent, ref } from 'vue'\n  export default defineComponent({\n    setup() {\n      const data = ref([\n        {\n          label: '一级 1',\n          children: [\n            {\n              label: '二级 1-1',\n              children: [\n                {\n                  label: '三级 1-1-1',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          label: '一级 2',\n          children: [\n            {\n              label: '二级 2-1',\n              children: [\n                {\n                  label: '三级 2-1-1',\n                },\n              ],\n            },\n            {\n              label: '二级 2-2',\n              children: [\n                {\n                  label: '三级 2-2-1',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          label: '一级 3',\n          children: [\n            {\n              label: '二级 3-1',\n              children: [\n                {\n                  label: '三级 3-1-1',\n                },\n              ],\n            },\n            {\n              label: '二级 3-2',\n              children: [\n                {\n                  label: '三级 3-2-1',\n                },\n              ],\n            },\n          ],\n        },\n      ])\n      const defaultProps = ref({\n        children: 'children',\n        label: 'label',\n      })\n      const handleNodeClick = data => {\n        console.log(data)\n      }\n      return {\n        data,\n        defaultProps,\n        handleNodeClick,\n      }\n    },\n  })\n<\/script>\n")],-1),N=i("h2",{id:"ke-xuan-ze"},[i("a",{class:"header-anchor",href:"#ke-xuan-ze"}),u(" 可选择")],-1),x=i("p",null,"适用于需要选择层级时使用。本例还展示了动态加载节点数据的方法。",-1),D=i("pre",null,[i("code",{class:"html"},"<template>\n  <hl-tree :props=\"props\" :load=\"loadNode\" lazy show-checkbox @check-change=\"handleCheckChange\"> </hl-tree>\n</template>\n\n<script>\n  import { defineComponent, ref } from 'vue'\n  export default defineComponent({\n    setup() {\n      const props = ref({\n        label: 'name',\n        children: 'zones',\n      })\n      const count = ref(1)\n\n      const handleCheckChange = (data, checked, indeterminate) => {\n        console.log(data, checked, indeterminate)\n      }\n      const handleNodeClick = data => {\n        console.log(data)\n      }\n      const loadNode = (node, resolve) => {\n        if (node.level === 0) {\n          return resolve([{ name: 'region1' }, { name: 'region2' }])\n        }\n        if (node.level > 3) return resolve([])\n\n        var hasChild\n        if (node.data.name === 'region1') {\n          hasChild = true\n        } else if (node.data.name === 'region2') {\n          hasChild = false\n        } else {\n          hasChild = Math.random() > 0.5\n        }\n\n        setTimeout(() => {\n          var data\n          if (hasChild) {\n            data = [\n              {\n                name: 'zone' + count.value++,\n              },\n              {\n                name: 'zone' + count.value++,\n              },\n            ]\n          } else {\n            data = []\n          }\n\n          resolve(data)\n        }, 500)\n      }\n      return {\n        props,\n        count,\n        handleCheckChange,\n        handleNodeClick,\n        loadNode,\n      }\n    },\n  })\n<\/script>\n")],-1),w=i("h2",{id:"lan-jia-zai-zi-ding-yi-ye-zi-jie-dian"},[i("a",{class:"header-anchor",href:"#lan-jia-zai-zi-ding-yi-ye-zi-jie-dian"}),u(" 懒加载自定义叶子节点")],-1),z=i("div",null,[i("p",null,"由于在点击节点时才进行该层数据的获取，默认情况下 Tree 无法预知某个节点是否为叶子节点，所以会为每个节点添加一个下拉按钮，如果节点没有下层数据，则点击后下拉按钮会消失。同时，你也可以提前告知 Tree 某个节点是否为叶子节点，从而避免在叶子节点前渲染下拉按钮。")],-1),P=i("pre",null,[i("code",{class:"html"},"<template>\n  <hl-tree :props=\"props\" :load=\"loadNode\" lazy show-checkbox> </hl-tree>\n</template>\n\n<script>\n  import { defineComponent, ref } from 'vue'\n  export default defineComponent({\n    setup() {\n      const props = ref({\n        label: 'name',\n        children: 'zones',\n        isLeaf: 'leaf',\n      })\n      const loadNode = (node, resolve) => {\n        if (node.level === 0) {\n          return resolve([{ name: 'region' }])\n        }\n        if (node.level > 1) return resolve([])\n\n        setTimeout(() => {\n          const data = [\n            {\n              name: 'leaf',\n              leaf: true,\n            },\n            {\n              name: 'zone',\n            },\n          ]\n\n          resolve(data)\n        }, 2000)\n      }\n      return {\n        props,\n        loadNode,\n      }\n    },\n  })\n<\/script>\n")],-1),T=i("h2",{id:"mo-ren-zhan-kai-he-mo-ren-xuan-zhong"},[i("a",{class:"header-anchor",href:"#mo-ren-zhan-kai-he-mo-ren-xuan-zhong"}),u(" 默认展开和默认选中")],-1),j=i("p",null,"可将 Tree 的某些节点设置为默认展开或默认选中",-1),K=i("div",null,[i("p",null,[u("分别通过"),i("code",null,"default-expanded-keys"),u("和"),i("code",null,"default-checked-keys"),u("设置默认展开和默认选中的节点。需要注意的是，此时必须设置"),i("code",null,"node-key"),u("，其值为节点数据中的一个字段名，该字段在整棵树中是唯一的。")])],-1),E=i("pre",null,[i("code",{class:"html"},"<template>\n  <hl-tree :data=\"data\" show-checkbox node-key=\"id\" :default-expanded-keys=\"[2, 3]\" :default-checked-keys=\"[5]\" :props=\"defaultProps\"> </hl-tree>\n</template>\n\n<script>\n  import { defineComponent, ref } from 'vue'\n  export default defineComponent({\n    setup() {\n      const data = ref([\n        {\n          id: 1,\n          label: '一级 1',\n          children: [\n            {\n              id: 4,\n              label: '二级 1-1',\n              children: [\n                {\n                  id: 9,\n                  label: '三级 1-1-1',\n                },\n                {\n                  id: 10,\n                  label: '三级 1-1-2',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: 2,\n          label: '一级 2',\n          children: [\n            {\n              id: 5,\n              label: '二级 2-1',\n            },\n            {\n              id: 6,\n              label: '二级 2-2',\n            },\n          ],\n        },\n        {\n          id: 3,\n          label: '一级 3',\n          children: [\n            {\n              id: 7,\n              label: '二级 3-1',\n            },\n            {\n              id: 8,\n              label: '二级 3-2',\n            },\n          ],\n        },\n      ])\n      const defaultProps = ref({\n        children: 'children',\n        label: 'label',\n      })\n      return {\n        data,\n        defaultProps,\n      }\n    },\n  })\n<\/script>\n")],-1),B=i("h2",{id:"jin-yong-zhuang-tai"},[i("a",{class:"header-anchor",href:"#jin-yong-zhuang-tai"}),u(" 禁用状态")],-1),_=i("p",null,"可将 Tree 的某些节点设置为禁用状态",-1),O=i("div",null,[i("p",null,[u("通过"),i("code",null,"disabled"),u("设置禁用状态。")])],-1),S=i("pre",null,[i("code",{class:"html"},"<template>\n  <hl-tree :data=\"data\" show-checkbox node-key=\"id\" :default-expanded-keys=\"[2, 3]\" :default-checked-keys=\"[5]\"> </hl-tree>\n</template>\n\n<script>\n  import { defineComponent, ref } from 'vue'\n  export default defineComponent({\n    setup() {\n      const data = ref([\n        {\n          id: 1,\n          label: '一级 2',\n          children: [\n            {\n              id: 3,\n              label: '二级 2-1',\n              children: [\n                {\n                  id: 4,\n                  label: '三级 3-1-1',\n                },\n                {\n                  id: 5,\n                  label: '三级 3-1-2',\n                  disabled: true,\n                },\n              ],\n            },\n            {\n              id: 2,\n              label: '二级 2-2',\n              disabled: true,\n              children: [\n                {\n                  id: 6,\n                  label: '三级 3-2-1',\n                },\n                {\n                  id: 7,\n                  label: '三级 3-2-2',\n                  disabled: true,\n                },\n              ],\n            },\n          ],\n        },\n      ])\n      const defaultProps = ref({\n        children: 'children',\n        label: 'label',\n      })\n      return {\n        data,\n        defaultProps,\n      }\n    },\n  })\n<\/script>\n")],-1),L=i("h2",{id:"shu-jie-dian-de-xuan-ze"},[i("a",{class:"header-anchor",href:"#shu-jie-dian-de-xuan-ze"}),u(" 树节点的选择")],-1),V=i("div",null,[i("p",null,[u("本例展示如何获取和设置选中节点。获取和设置各有两种方式：通过 node 或通过 key。如果需要通过 key 来获取或设置，则必须设置"),i("code",null,"node-key"),u("。")])],-1),A=i("pre",null,[i("code",{class:"html"},"<template>\n  <hl-tree :data=\"data\" show-checkbox default-expand-all node-key=\"id\" ref=\"tree\" highlight-current :props=\"defaultProps\"> </hl-tree>\n\n  <div class=\"buttons\">\n    <hl-button @click=\"getCheckedNodes\">通过 node 获取</hl-button>\n    <hl-button @click=\"getCheckedKeys\">通过 key 获取</hl-button>\n    <hl-button @click=\"setCheckedNodes\">通过 node 设置</hl-button>\n    <hl-button @click=\"setCheckedKeys\">通过 key 设置</hl-button>\n    <hl-button @click=\"resetChecked\">清空</hl-button>\n  </div>\n</template>\n\n<script>\n  import { defineComponent, ref } from 'vue'\n  export default defineComponent({\n    setup() {\n      const data = ref([\n        {\n          id: 1,\n          label: '一级 1',\n          children: [\n            {\n              id: 4,\n              label: '二级 1-1',\n              children: [\n                {\n                  id: 9,\n                  label: '三级 1-1-1',\n                },\n                {\n                  id: 10,\n                  label: '三级 1-1-2',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: 2,\n          label: '一级 2',\n          children: [\n            {\n              id: 5,\n              label: '二级 2-1',\n            },\n            {\n              id: 6,\n              label: '二级 2-2',\n            },\n          ],\n        },\n        {\n          id: 3,\n          label: '一级 3',\n          children: [\n            {\n              id: 7,\n              label: '二级 3-1',\n            },\n            {\n              id: 8,\n              label: '二级 3-2',\n            },\n          ],\n        },\n      ])\n      const defaultProps = ref({\n        children: 'children',\n        label: 'label',\n      })\n      const tree = ref(null)\n\n      const getCheckedNodes = () => {\n        console.log(tree.value.getCheckedNodes())\n      }\n      const getCheckedKeys = () => {\n        console.log(tree.value.getCheckedKeys())\n      }\n      const setCheckedNodes = () => {\n        tree.value.setCheckedNodes([\n          {\n            id: 5,\n            label: '二级 2-1',\n          },\n          {\n            id: 9,\n            label: '三级 1-1-1',\n          },\n        ])\n      }\n      const setCheckedKeys = () => {\n        tree.value.setCheckedKeys([3])\n      }\n      const resetChecked = () => {\n        tree.value.setCheckedKeys([])\n      }\n      return {\n        tree,\n        data,\n        defaultProps,\n        getCheckedNodes,\n        getCheckedKeys,\n        setCheckedNodes,\n        setCheckedKeys,\n        resetChecked,\n      }\n    },\n  })\n<\/script>\n")],-1),F=i("h2",{id:"zi-ding-yi-jie-dian-nei-rong"},[i("a",{class:"header-anchor",href:"#zi-ding-yi-jie-dian-nei-rong"}),u(" 自定义节点内容")],-1),H=i("p",null,"节点的内容支持自定义，可以在节点区添加按钮或图标等内容",-1),I=i("div",null,[i("p",null,[u("可以通过两种方法进行树节点内容的自定义："),i("code",null,"render-content"),u("和 scoped slot。使用"),i("code",null,"render-content"),u("指定渲染函数，该函数返回需要的节点区内容即可。渲染函数的用法请参考 Vue 文档。使用 scoped slot 会传入两个参数"),i("code",null,"node"),u("和"),i("code",null,"data"),u("，分别表示当前节点的 Node 对象和当前节点的数据。注意：由于 jsfiddle 不支持 JSX 语法，所以"),i("code",null,"render-content"),u("示例在 jsfiddle 中无法运行。但是在实际的项目中，只要正确地配置了相关依赖，就可以正常运行。")])],-1),q=i("pre",null,[i("code",{class:"html"},"<template>\n  <div class=\"custom-tree-container\">\n    <div class=\"block\">\n      <p>使用 render-content</p>\n      <hl-tree :data=\"data\" show-checkbox node-key=\"id\" default-expand-all :expand-on-click-node=\"false\" :render-content=\"renderContent\"></hl-tree>\n    </div>\n    <div class=\"block\">\n      <p>使用 slot</p>\n      <hl-tree :data=\"data\" show-checkbox node-key=\"id\" default-expand-all :expand-on-click-node=\"false\">\n        <template #default=\"{ node, data }\">\n          <hl-group full gap=\"var(--xs)\" align=\"between\">\n            <hl-icon size=\"xs\" class=\"static\">\n              <two-folder />\n            </hl-icon>\n            <span>{{ node.label }}</span>\n            <hl-group gap=\"var(--md)\" class=\"static\">\n              <a @click=\"append(data)\">\n                Append\n              </a>\n              <a @click=\"remove(node, data)\">\n                Delete\n              </a>\n            </hl-group>\n          </hl-group>\n        </template>\n      </hl-tree>\n    </div>\n  </div>\n</template>\n\n<script>\n  import { defineComponent, ref } from 'vue'\n  export default defineComponent({\n    setup() {\n      let id = 1000\n      const data = ref([\n        {\n          id: 1,\n          label: '一级 1',\n          children: [\n            {\n              id: 4,\n              label: '二级 1-1',\n              children: [\n                {\n                  id: 9,\n                  label: '三级 1-1-1',\n                },\n                {\n                  id: 10,\n                  label: '三级 1-1-2',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: 2,\n          label: '一级 2',\n          children: [\n            {\n              id: 5,\n              label: '二级 2-1',\n            },\n            {\n              id: 6,\n              label: '二级 2-2',\n            },\n          ],\n        },\n        {\n          id: 3,\n          label: '一级 3',\n          children: [\n            {\n              id: 7,\n              label: '二级 3-1',\n            },\n            {\n              id: 8,\n              label: '二级 3-2',\n            },\n          ],\n        },\n      ])\n\n      const append = d => {\n        const newChild = { id: id++, label: 'testtest', children: [] }\n        if (!d.children) {\n          d.children = []\n        }\n        d.children.push(newChild)\n      }\n      const remove = (node, d) => {\n        const parent = node.parent\n        const children = parent.data.children || parent.data\n        const index = children.findIndex(d => d.id === d.id)\n        children.splice(index, 1)\n      }\n      const renderContent = (h, { node, data, store }) => {\n        return h(\n          'span',\n          {\n            class: 'custom-tree-node',\n          },\n          h('span', null, node.label),\n          h(\n            'span',\n            null,\n            h(\n              'a',\n              {\n                onClick: () => append(data),\n              },\n              'Append ',\n            ),\n            h(\n              'a',\n              {\n                onClick: () => remove(node, data),\n              },\n              'Delete',\n            ),\n          ),\n        )\n      }\n      return {\n        data,\n        append,\n        remove,\n        renderContent,\n      }\n    },\n  })\n<\/script>\n\n<style>\n  .custom-tree-node {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 14px;\n    padding-right: 8px;\n  }\n</style>\n")],-1),M=i("h2",{id:"jie-dian-guo-lu"},[i("a",{class:"header-anchor",href:"#jie-dian-guo-lu"}),u(" 节点过滤")],-1),J=i("p",null,"通过关键字过滤树节点",-1),U=i("div",null,[i("p",null,[u("在需要对节点进行过滤时，调用 Tree 实例的"),i("code",null,"filter"),u("方法，参数为关键字。需要注意的是，此时需要设置"),i("code",null,"filter-node-method"),u("，值为过滤函数。")])],-1),X=i("pre",null,[i("code",{class:"html"},"<template>\n  <hl-input placeholder=\"输入关键字进行过滤\" v-model=\"filterText\"> </hl-input>\n\n  <hl-tree class=\"filter-tree\" :data=\"data\" :props=\"defaultProps\" default-expand-all :filter-node-method=\"filterNode\" ref=\"tree\"> </hl-tree>\n</template>\n\n<script>\n  import { defineComponent, ref, watch } from 'vue'\n  export default defineComponent({\n    setup() {\n      const filterText = ref('')\n      const tree = ref(null)\n      const data = ref([\n        {\n          id: 1,\n          label: '一级 1',\n          children: [\n            {\n              id: 4,\n              label: '二级 1-1',\n              children: [\n                {\n                  id: 9,\n                  label: '三级 1-1-1',\n                },\n                {\n                  id: 10,\n                  label: '三级 1-1-2',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: 2,\n          label: '一级 2',\n          children: [\n            {\n              id: 5,\n              label: '二级 2-1',\n            },\n            {\n              id: 6,\n              label: '二级 2-2',\n            },\n          ],\n        },\n        {\n          id: 3,\n          label: '一级 3',\n          children: [\n            {\n              id: 7,\n              label: '二级 3-1',\n            },\n            {\n              id: 8,\n              label: '二级 3-2',\n            },\n          ],\n        },\n      ])\n      const defaultProps = ref({\n        children: 'children',\n        label: 'label',\n      })\n\n      const filterNode = (value, data) => {\n        if (!value) return true\n        return data.label.indexOf(value) !== -1\n      }\n\n      watch(filterText, val => {\n        tree.value.filter(val)\n      })\n\n      return {\n        data,\n        tree,\n        defaultProps,\n        filterText,\n        filterNode,\n      }\n    },\n  })\n<\/script>\n")],-1),G=i("h2",{id:"shou-feng-qin-mo-shi"},[i("a",{class:"header-anchor",href:"#shou-feng-qin-mo-shi"}),u(" 手风琴模式")],-1),Q=i("p",null,"对于同一级的节点，每次只能展开一个",-1),R=i("pre",null,[i("code",{class:"html"},"<template>\n  <hl-tree :data=\"data\" :props=\"defaultProps\" accordion @node-click=\"handleNodeClick\"> </hl-tree>\n</template>\n\n<script>\n  import { defineComponent, ref } from 'vue'\n  export default defineComponent({\n    setup() {\n      const data = ref([\n        {\n          label: '一级 1',\n          children: [\n            {\n              label: '二级 1-1',\n              children: [\n                {\n                  label: '三级 1-1-1',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          label: '一级 2',\n          children: [\n            {\n              label: '二级 2-1',\n              children: [\n                {\n                  label: '三级 2-1-1',\n                },\n              ],\n            },\n            {\n              label: '二级 2-2',\n              children: [\n                {\n                  label: '三级 2-2-1',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          label: '一级 3',\n          children: [\n            {\n              label: '二级 3-1',\n              children: [\n                {\n                  label: '三级 3-1-1',\n                },\n              ],\n            },\n            {\n              label: '二级 3-2',\n              children: [\n                {\n                  label: '三级 3-2-1',\n                },\n              ],\n            },\n          ],\n        },\n      ])\n      const defaultProps = ref({\n        children: 'children',\n        label: 'label',\n      })\n\n      const handleNodeClick = data => {\n        console.log(data)\n      }\n      return {\n        data,\n        defaultProps,\n        handleNodeClick,\n      }\n    },\n  })\n<\/script>\n")],-1),W=i("h2",{id:"ke-tuo-zhuai-jie-dian"},[i("a",{class:"header-anchor",href:"#ke-tuo-zhuai-jie-dian"}),u(" 可拖拽节点")],-1),Y=i("p",null,"通过 draggable 属性可让节点变为可拖拽。",-1),Z=i("pre",null,[i("code",{class:"html"},"<template>\n  <hl-tree\n    :data=\"data\"\n    node-key=\"id\"\n    default-expand-all\n    @node-drag-start=\"handleDragStart\"\n    @node-drag-enter=\"handleDragEnter\"\n    @node-drag-leave=\"handleDragLeave\"\n    @node-drag-over=\"handleDragOver\"\n    @node-drag-end=\"handleDragEnd\"\n    @node-drop=\"handleDrop\"\n    draggable\n    :allow-drop=\"allowDrop\"\n    :allow-drag=\"allowDrag\"\n  >\n  </hl-tree>\n</template>\n\n<script>\n  import { defineComponent, ref } from 'vue'\n  export default defineComponent({\n    setup() {\n      const data = ref([\n        {\n          id: 1,\n          label: '一级 1',\n          children: [\n            {\n              id: 4,\n              label: '二级 1-1',\n              children: [\n                {\n                  id: 9,\n                  label: '三级 1-1-1',\n                },\n                {\n                  id: 10,\n                  label: '三级 1-1-2',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: 2,\n          label: '一级 2',\n          children: [\n            {\n              id: 5,\n              label: '二级 2-1',\n            },\n            {\n              id: 6,\n              label: '二级 2-2',\n            },\n          ],\n        },\n        {\n          id: 3,\n          label: '一级 3',\n          children: [\n            {\n              id: 7,\n              label: '二级 3-1',\n            },\n            {\n              id: 8,\n              label: '二级 3-2',\n              children: [\n                {\n                  id: 11,\n                  label: '三级 3-2-1',\n                },\n                {\n                  id: 12,\n                  label: '三级 3-2-2',\n                },\n                {\n                  id: 13,\n                  label: '三级 3-2-3',\n                },\n              ],\n            },\n          ],\n        },\n      ])\n      const defaultProps = ref({\n        children: 'children',\n        label: 'label',\n      })\n\n      const handleDragStart = (node, ev) => {\n        console.log('drag start', node)\n      }\n      const handleDragEnter = (draggingNode, dropNode, ev) => {\n        console.log('tree drag enter: ', dropNode.label)\n      }\n      const handleDragLeave = (draggingNode, dropNode, ev) => {\n        console.log('tree drag leave: ', dropNode.label)\n      }\n      const handleDragOver = (draggingNode, dropNode, ev) => {\n        console.log('tree drag over: ', dropNode.label)\n      }\n      const handleDragEnd = (draggingNode, dropNode, dropType, ev) => {\n        console.log('tree drag end: ', dropNode && dropNode.label, dropType)\n      }\n      const handleDrop = (draggingNode, dropNode, dropType, ev) => {\n        console.log('tree drop: ', dropNode.label, dropType)\n      }\n      const allowDrop = (draggingNode, dropNode, type) => {\n        if (dropNode.data.label === '二级 3-1') {\n          return type !== 'inner'\n        } else {\n          return true\n        }\n      }\n      const allowDrag = draggingNode => {\n        return draggingNode.data.label.indexOf('三级 3-2-2') === -1\n      }\n      return {\n        data,\n        defaultProps,\n        handleDragStart,\n        handleDragEnter,\n        handleDragLeave,\n        handleDragOver,\n        handleDragEnd,\n        handleDrop,\n        allowDrop,\n        allowDrag,\n      }\n    },\n  })\n<\/script>\n")],-1),$=b('<h2 id="attributes"><a class="header-anchor" href="#attributes"></a> Attributes</h2><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>data</td><td>展示数据</td><td>array</td><td>—</td><td>—</td></tr><tr><td>empty-text</td><td>内容为空的时候展示的文本</td><td>String</td><td>—</td><td>—</td></tr><tr><td>node-key</td><td>每个树节点用来作为唯一标识的属性，整棵树应该是唯一的</td><td>String</td><td>—</td><td>—</td></tr><tr><td>props</td><td>配置选项，具体看下表</td><td>object</td><td>—</td><td>—</td></tr><tr><td>render-after-expand</td><td>是否在第一次展开某个树节点后才渲染其子节点</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>load</td><td>加载子树数据的方法，仅当 lazy 属性为 true 时生效</td><td>function(node, resolve)</td><td>—</td><td>—</td></tr><tr><td>render-content</td><td>树节点的内容区的渲染 Function</td><td>Function(h, { node, data, store })</td><td>—</td><td>—</td></tr><tr><td>highlight-current</td><td>是否高亮当前选中节点，默认值是 false。</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>default-expand-all</td><td>是否默认展开所有节点</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>expand-on-click-node</td><td>是否在点击节点的时候展开或者收缩节点， 默认值为 true，如果为 false，则只有点箭头图标的时候才会展开或者收缩节点。</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>check-on-click-node</td><td>是否在点击节点的时候选中节点，默认值为 false，即只有在点击复选框时才会选中节点。</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>auto-expand-parent</td><td>展开子节点的时候是否自动展开父节点</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>default-expanded-keys</td><td>默认展开的节点的 key 的数组</td><td>array</td><td>—</td><td>—</td></tr><tr><td>show-checkbox</td><td>节点是否可被选择</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>check-strictly</td><td>在显示复选框的情况下，是否严格的遵循父子不互相关联的做法，默认为 false</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>default-checked-keys</td><td>默认勾选的节点的 key 的数组</td><td>array</td><td>—</td><td>—</td></tr><tr><td>current-node-key</td><td>当前选中的节点</td><td>string, number</td><td>—</td><td>—</td></tr><tr><td>filter-node-method</td><td>对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏</td><td>Function(value, data, node)</td><td>—</td><td>—</td></tr><tr><td>accordion</td><td>是否每次只打开一个同级树节点展开</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>indent</td><td>相邻级节点间的水平缩进，单位为像素</td><td>number</td><td>—</td><td>16</td></tr><tr><td>icon-class</td><td>自定义树节点的图标</td><td>string</td><td>-</td><td>-</td></tr><tr><td>lazy</td><td>是否懒加载子节点，需与 load 方法结合使用</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>draggable</td><td>是否开启拖拽节点功能</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>allow-drag</td><td>判断节点能否被拖拽</td><td>Function(node)</td><td>—</td><td>—</td></tr><tr><td>allow-drop</td><td>拖拽时判定目标节点能否被放置。<code>type</code> 参数有三种情况：&#39;prev&#39;、&#39;inner&#39; 和 &#39;next&#39;，分别表示放置在目标节点前、插入至目标节点和放置在目标节点后</td><td>Function(draggingNode, dropNode, type)</td><td>—</td><td>—</td></tr></tbody></table><h3 id="props"><a class="header-anchor" href="#props"></a> props</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>label</td><td>指定节点标签为节点对象的某个属性值</td><td>string, function(data, node)</td><td>—</td><td>—</td></tr><tr><td>children</td><td>指定子树为节点对象的某个属性值</td><td>string</td><td>—</td><td>—</td></tr><tr><td>disabled</td><td>指定节点选择框是否禁用为节点对象的某个属性值</td><td>boolean, function(data, node)</td><td>—</td><td>—</td></tr><tr><td>isLeaf</td><td>指定节点是否为叶子节点，仅在指定了 lazy 属性的情况下生效</td><td>boolean, function(data, node)</td><td>—</td><td>—</td></tr></tbody></table><h3 id="fang-fa"><a class="header-anchor" href="#fang-fa"></a> 方法</h3><p><code>Tree</code> 内部使用了 Node 类型的对象来包装用户传入的数据，用来保存目前节点的状态。 <code>Tree</code> 拥有如下方法：</p><table><thead><tr><th>方法名</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>filter</td><td>对树节点进行筛选操作</td><td>接收一个任意类型的参数，该参数会在 filter-node-method 中作为第一个参数</td></tr><tr><td>updateKeyChildren</td><td>通过 keys 设置节点子元素，使用此方法必须设置 node-key 属性</td><td>(key, data) 接收两个参数，1. 节点 key 2. 节点数据的数组</td></tr><tr><td>getCheckedNodes</td><td>若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前被选中的节点所组成的数组</td><td>(leafOnly, includeHalfChecked) 接收两个 boolean 类型的参数，1. 是否只是叶子节点，默认值为 <code>false</code> 2. 是否包含半选节点，默认值为 <code>false</code></td></tr><tr><td>setCheckedNodes</td><td>设置目前勾选的节点，使用此方法必须设置 node-key 属性</td><td>(nodes) 接收勾选节点数据的数组</td></tr><tr><td>getCheckedKeys</td><td>若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前被选中的节点的 key 所组成的数组</td><td>(leafOnly) 接收一个 boolean 类型的参数，若为 <code>true</code> 则仅返回被选中的叶子节点的 keys，默认值为 <code>false</code></td></tr><tr><td>setCheckedKeys</td><td>通过 keys 设置目前勾选的节点，使用此方法必须设置 node-key 属性</td><td>(keys, leafOnly) 接收两个参数，1. 勾选节点的 key 的数组 2. boolean 类型的参数，若为 <code>true</code> 则仅设置叶子节点的选中状态，默认值为 <code>false</code></td></tr><tr><td>setChecked</td><td>通过 key / data 设置某个节点的勾选状态，使用此方法必须设置 node-key 属性</td><td>(key/data, checked, deep) 接收三个参数，1. 勾选节点的 key 或者 data 2. boolean 类型，节点是否选中 3. boolean 类型，是否设置子节点 ，默认为 false</td></tr><tr><td>getHalfCheckedNodes</td><td>若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前半选中的节点所组成的数组</td><td>-</td></tr><tr><td>getHalfCheckedKeys</td><td>若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前半选中的节点的 key 所组成的数组</td><td>-</td></tr><tr><td>getCurrentKey</td><td>获取当前被选中节点的 key，使用此方法必须设置 node-key 属性，若没有节点被选中则返回 null</td><td>—</td></tr><tr><td>getCurrentNode</td><td>获取当前被选中节点的 data，若没有节点被选中则返回 null</td><td>—</td></tr><tr><td>setCurrentKey</td><td>通过 key 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性</td><td>(key, shouldAutoExpandParent=true) 1. 待被选节点的 key，若为 null 则取消当前高亮的节点 2. 是否扩展父节点</td></tr><tr><td>setCurrentNode</td><td>通过 node 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性</td><td>(node, shouldAutoExpandParent=true) 1. 待被选节点的 node 2. 是否扩展父节点</td></tr><tr><td>getNode</td><td>根据 data 或者 key 拿到 Tree 组件中的 node</td><td>(data) 要获得 node 的 key 或者 data</td></tr><tr><td>getNodePath</td><td>根据 data 或者 key 拿到 Tree 组件中的 node 完整路径</td><td>(data) 要获得 node 的 data 数组</td></tr><tr><td>remove</td><td>删除 Tree 中的一个节点，使用此方法必须设置 node-key 属性</td><td>(data) 要删除的节点的 data 或者 node</td></tr><tr><td>append</td><td>为 Tree 中的一个节点追加一个子节点</td><td>(data, parentNode) 接收两个参数，1. 要追加的子节点的 data 2. 子节点的 parent 的 data、key 或者 node</td></tr><tr><td>insertBefore</td><td>为 Tree 的一个节点的前面增加一个节点</td><td>(data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的后一个节点的 data、key 或者 node</td></tr><tr><td>insertAfter</td><td>为 Tree 的一个节点的后面增加一个节点</td><td>(data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的前一个节点的 data、key 或者 node</td></tr></tbody></table><h3 id="events"><a class="header-anchor" href="#events"></a> Events</h3><table><thead><tr><th>事件名称</th><th>说明</th><th>回调参数</th></tr></thead><tbody><tr><td>node-click</td><td>节点被点击时的回调</td><td>共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。</td></tr><tr><td>node-contextmenu</td><td>当某一节点被鼠标右键点击时会触发该事件</td><td>共四个参数，依次为：event、传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。</td></tr><tr><td>check-change</td><td>节点选中状态发生变化时的回调</td><td>共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点本身是否被选中、节点的子树中是否有被选中的节点</td></tr><tr><td>check</td><td>当复选框被点击的时候触发</td><td>共两个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、树目前的选中状态对象，包含 checkedNodes、checkedKeys、halfCheckedNodes、halfCheckedKeys 四个属性</td></tr><tr><td>current-change</td><td>当前选中节点变化时触发的事件</td><td>共两个参数，依次为：当前节点的数据，当前节点的 Node 对象</td></tr><tr><td>node-expand</td><td>节点被展开时触发的事件</td><td>共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身</td></tr><tr><td>node-collapse</td><td>节点被关闭时触发的事件</td><td>共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身</td></tr><tr><td>node-drag-start</td><td>节点开始拖拽时触发的事件</td><td>共两个参数，依次为：被拖拽节点对应的 Node、event</td></tr><tr><td>node-drag-enter</td><td>拖拽进入其他节点时触发的事件</td><td>共三个参数，依次为：被拖拽节点对应的 Node、所进入节点对应的 Node、event</td></tr><tr><td>node-drag-leave</td><td>拖拽离开某个节点时触发的事件</td><td>共三个参数，依次为：被拖拽节点对应的 Node、所离开节点对应的 Node、event</td></tr><tr><td>node-drag-over</td><td>在拖拽节点时触发的事件（类似浏览器的 mouseover 事件）</td><td>共三个参数，依次为：被拖拽节点对应的 Node、当前进入节点对应的 Node、event</td></tr><tr><td>node-drag-end</td><td>拖拽结束时（可能未成功）触发的事件</td><td>共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点（可能为空）、被拖拽节点的放置位置（before、after、inner）、event</td></tr><tr><td>node-drop</td><td>拖拽成功完成时触发的事件</td><td>共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点、被拖拽节点的放置位置（before、after、inner）、event</td></tr></tbody></table><h3 id="scoped-slot"><a class="header-anchor" href="#scoped-slot"></a> Scoped Slot</h3><table><thead><tr><th>name</th><th>说明</th></tr></thead><tbody><tr><td>—</td><td>自定义树节点的内容，参数为 { node, data }</td></tr></tbody></table>',11);var ee=f(g,[["render",function(e,n,d,t,l,a){const p=o("hl-demo0"),u=o("demo-block"),b=o("hl-demo1"),f=o("hl-demo2"),g=o("hl-demo3"),ee=o("hl-demo4"),ne=o("hl-demo5"),de=o("hl-demo6"),te=o("hl-demo7"),le=o("hl-demo8"),ae=o("hl-demo9"),oe=o("right-nav");return r(),c("section",k,[i("div",m,[C,v,s(u,null,{source:h((()=>[s(p)])),highlight:h((()=>[y])),_:1}),N,x,s(u,null,{source:h((()=>[s(b)])),highlight:h((()=>[D])),_:1}),w,s(u,null,{source:h((()=>[s(f)])),highlight:h((()=>[P])),default:h((()=>[z])),_:1}),T,j,s(u,null,{source:h((()=>[s(g)])),highlight:h((()=>[E])),default:h((()=>[K])),_:1}),B,_,s(u,null,{source:h((()=>[s(ee)])),highlight:h((()=>[S])),default:h((()=>[O])),_:1}),L,s(u,null,{source:h((()=>[s(ne)])),highlight:h((()=>[A])),default:h((()=>[V])),_:1}),F,H,s(u,null,{source:h((()=>[s(de)])),highlight:h((()=>[q])),default:h((()=>[I])),_:1}),M,J,s(u,null,{source:h((()=>[s(te)])),highlight:h((()=>[X])),default:h((()=>[U])),_:1}),G,Q,s(u,null,{source:h((()=>[s(le)])),highlight:h((()=>[R])),_:1}),W,Y,s(u,null,{source:h((()=>[s(ae)])),highlight:h((()=>[Z])),_:1}),$]),s(oe)])}]]);export{ee as default};
