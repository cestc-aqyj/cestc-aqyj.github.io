(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[31],{

/***/ 471:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/vue/dist/vue.esm-browser.prod.js
var vue_esm_browser_prod = __webpack_require__(0);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/dist/templateLoader.js??ref--6!./node_modules/vue-loader/dist??ref--2-0!./website/md-loader!./website/docs/zh-CN/quickstart.md?vue&type=template&id=87576c74

var _hoisted_1 = {
  class: "doc-main-content"
};

var _hoisted_2 = /*#__PURE__*/Object(vue_esm_browser_prod["m" /* createStaticVNode */])("<div class=\"doc-content\"><h2 id=\"kuai-su-shang-shou\"><a class=\"header-anchor\" href=\"#kuai-su-shang-shou\"></a> 快速上手</h2><p>本节将介绍如何在项目中使用 鸿鸾UI。</p><h2 id=\"yin-ru-hongluan-ui-library\"><a class=\"header-anchor\" href=\"#yin-ru-hongluan-ui-library\"></a> 引入 Hongluan UI Library</h2><p>你可以引入整个 Hongluan UI Library，或是根据需要仅引入部分组件。我们先介绍如何引入完整的 Hongluan UI Library。</p><h2 id=\"wan-zheng-yin-ru\"><a class=\"header-anchor\" href=\"#wan-zheng-yin-ru\"></a> 完整引入</h2><p>在 main.js 中写入以下内容：</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> HongluanUILibrary <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;hongluan-ui&#39;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#39;hongluan-ui/lib/theme/index.css&#39;</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;./App.vue&#39;</span>;\n\n<span class=\"hljs-keyword\">const</span> app = createApp(App)\napp.use(HongluanUILibrary)\napp.mount(<span class=\"hljs-string\">&#39;#app&#39;</span>)\n</code></pre><p>以上代码便完成了 Hongluan UI Library 的引入。需要注意的是，样式文件需要单独引入。</p><h2 id=\"an-xu-yin-ru\"><a class=\"header-anchor\" href=\"#an-xu-yin-ru\"></a> 按需引入</h2><div class=\"warning\"><p>目前scss/css暂时不支持按照单独组件引入，请按照上面代码中的用法整个引入组件库样式</p></div><h3 id=\"webpack\"><a class=\"header-anchor\" href=\"#webpack\"></a> Webpack</h3><pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> HlButton <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;hongluan-ui/lib/hl-button&#39;</span>;\n<span class=\"hljs-keyword\">import</span> HlSelect <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;hongluan-ui/lib/hl-select&#39;</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;./App.vue&#39;</span>;\n\n<span class=\"hljs-keyword\">const</span> app = createApp(App)\napp.component(HlButton.name, HlButton); <span class=\"hljs-comment\">// 注意：此种写法的组件不带有默认的hl前缀</span>\napp.component(HlSelect.name, HlSelect); <span class=\"hljs-comment\">// 注意：此种写法的组件不带有默认的hl前缀</span>\n\n<span class=\"hljs-comment\">/* or\n * app.use(HlButton) // 组件带默认前缀\n * app.use(HlSelect)\n */</span>\n\napp.mount(<span class=\"hljs-string\">&#39;#app&#39;</span>)\n</code></pre><h3 id=\"vite\"><a class=\"header-anchor\" href=\"#vite\"></a> Vite</h3><p>首先，安装 <a href=\"https://github.com/anncwb/vite-plugin-style-import\">vite-plugin-style-import</a>:</p><pre><code class=\"hljs language-bash\">$ npm install vite-plugin-style-import -D\n</code></pre><p>或者</p><pre><code class=\"hljs language-bash\">$ yarn add vite-plugin-style-import -D\n</code></pre><p>然后，将 vite.config.js 修改为：</p><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vite&#39;</span>\n<span class=\"hljs-keyword\">import</span> vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;@vitejs/plugin-vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> styleImport <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vite-plugin-style-import&#39;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineConfig({\n  <span class=\"hljs-attr\">plugins</span>: [\n    vue(),\n    styleImport({\n      <span class=\"hljs-attr\">libs</span>: [{\n        <span class=\"hljs-attr\">libraryName</span>: <span class=\"hljs-string\">&#39;hongluan-ui&#39;</span>,\n        <span class=\"hljs-attr\">esModule</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">ensureStyleFile</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">resolveComponent</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">name</span>) =&gt;</span> {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`hongluan-ui/lib/<span class=\"hljs-subst\">${name}</span>`</span>;\n        },\n      }]\n    })\n  ]\n})\n</code></pre><p>接下来，如果你只希望引入部分组件，比如 Button 和 Select，那么需要在 main.js 中写入以下内容：</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> { HlButton, HlSelect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;hongluan-ui&#39;</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;./App.vue&#39;</span>;\n\n<span class=\"hljs-keyword\">const</span> app = createApp(App)\napp.component(HlButton.name, HlButton); <span class=\"hljs-comment\">// 注意：此种写法的组件不带有默认的hl前缀</span>\napp.component(HlSelect.name, HlSelect); <span class=\"hljs-comment\">// 注意：此种写法的组件不带有默认的hl前缀</span>\n\n<span class=\"hljs-comment\">/* or\n * app.use(HlButton) // 组件带默认前缀\n * app.use(HlSelect)\n */</span>\n\napp.mount(<span class=\"hljs-string\">&#39;#app&#39;</span>)\n</code></pre><p>完整组件列表和引入方式</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;./App.vue&#39;</span>;\n<span class=\"hljs-keyword\">import</span> {\n  HlAlert,\n  HlAside,\n  HlAutocomplete,\n  HlAvatar,\n  HlBacktop,\n  HlBadge,\n  HlBreadcrumb,\n  HlBreadcrumbItem,\n  HlButton,\n  HlButtonGroup,\n  HlCalendar,\n  HlCard,\n  HlCarousel,\n  HlCarouselItem,\n  HlCascader,\n  HlCascaderPanel,\n  HlCheckbox,\n  HlCheckboxButton,\n  HlCheckboxGroup,\n  HlCol,\n  HlCollapse,\n  HlCollapseItem,\n  HlCollapseTransition,\n  HlColorPicker,\n  HlContainer,\n  HlDatePicker,\n  HlDialog,\n  HlDivider,\n  HlDrawer,\n  HlDropdown,\n  HlDropdownItem,\n  HlDropdownMenu,\n  HlFooter,\n  HlForm,\n  HlFormItem,\n  HlHeader,\n  HlIcon,\n  HlImage,\n  HlInput,\n  HlInputNumber,\n  HlLink,\n  HlMain,\n  HlMenu,\n  HlMenuItem,\n  HlMenuItemGroup,\n  HlOption,\n  HlOptionGroup,\n  HlPageHeader,\n  HlPagination,\n  HlPopconfirm,\n  HlPopover,\n  HlPopper,\n  HlProgress,\n  HlRadio,\n  HlRadioButton,\n  HlRadioGroup,\n  HlRate,\n  HlRow,\n  HlScrollbar,\n  HlSelect,\n  HlSlider,\n  HlStep,\n  HlSteps,\n  HlSubmenu,\n  HlSwitch,\n  HlTabPane,\n  HlTable,\n  HlTableColumn,\n  HlTabs,\n  HlTag,\n  HlTimePicker,\n  HlTimeSelect,\n  HlTimeline,\n  HlTimelineItem,\n  HlTooltip,\n  HlTransfer,\n  HlTree,\n  HlUpload,\n  HlInfiniteScroll,\n  HlLoading,\n  HlMessage,\n  HlMessageBox,\n  HlNotification,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;hongluan-ui&#39;</span>;\n\n<span class=\"hljs-keyword\">const</span> components = [\n  HlAlert,\n  HlAside,\n  HlAutocomplete,\n  HlAvatar,\n  HlBacktop,\n  HlBadge,\n  HlBreadcrumb,\n  HlBreadcrumbItem,\n  HlButton,\n  HlButtonGroup,\n  HlCalendar,\n  HlCard,\n  HlCarousel,\n  HlCarouselItem,\n  HlCascader,\n  HlCascaderPanel,\n  HlCheckbox,\n  HlCheckboxButton,\n  HlCheckboxGroup,\n  HlCol,\n  HlCollapse,\n  HlCollapseItem,\n  HlCollapseTransition,\n  HlColorPicker,\n  HlContainer,\n  HlDatePicker,\n  HlDialog,\n  HlDivider,\n  HlDrawer,\n  HlDropdown,\n  HlDropdownItem,\n  HlDropdownMenu,\n  HlFooter,\n  HlForm,\n  HlFormItem,\n  HlHeader,\n  HlIcon,\n  HlImage,\n  HlInput,\n  HlInputNumber,\n  HlLink,\n  HlMain,\n  HlMenu,\n  HlMenuItem,\n  HlMenuItemGroup,\n  HlOption,\n  HlOptionGroup,\n  HlPageHeader,\n  HlPagination,\n  HlPopconfirm,\n  HlPopover,\n  HlPopper,\n  HlProgress,\n  HlRadio,\n  HlRadioButton,\n  HlRadioGroup,\n  HlRate,\n  HlRow,\n  HlScrollbar,\n  HlSelect,\n  HlSlider,\n  HlStep,\n  HlSteps,\n  HlSubmenu,\n  HlSwitch,\n  HlTabPane,\n  HlTable,\n  HlTableColumn,\n  HlTabs,\n  HlTag,\n  HlTimePicker,\n  HlTimeSelect,\n  HlTimeline,\n  HlTimelineItem,\n  HlTooltip,\n  HlTransfer,\n  HlTree,\n  HlUpload,\n]\n\n<span class=\"hljs-keyword\">const</span> plugins = [\n  HlInfiniteScroll,\n  HlLoading,\n  HlMessage,\n  HlMessageBox,\n  HlNotification,\n]\n\n<span class=\"hljs-keyword\">const</span> app = createApp(App)\n\ncomponents.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">component</span> =&gt;</span> {\n  app.component(component.name, component)\n})\n\nplugins.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">plugin</span> =&gt;</span> {\n  app.use(plugin)\n})\n</code></pre><h2 id=\"quan-ju-pei-zhi\"><a class=\"header-anchor\" href=\"#quan-ju-pei-zhi\"></a> 全局配置</h2><p>在引入 Hongluan UI Library 时，可以传入一个全局配置对象。该对象目前支持 <code>size</code> 与 <code>zIndex</code> 字段。<code>size</code> 用于改变组件的默认尺寸，<code>zIndex</code> 设置弹框的初始 z-index（默认值：2000）。按需引入 Hongluan UI Library 的方式，具体操作如下：</p><p>完整引入 Hongluan UI Library：</p><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> HongluanUILibrary <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;hongluan-ui&#39;</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;./App.vue&#39;</span>;\n\n<span class=\"hljs-keyword\">const</span> app = createApp(App)\napp.use(HongluanUILibrary, { <span class=\"hljs-attr\">size</span>: <span class=\"hljs-string\">&#39;small&#39;</span>, <span class=\"hljs-attr\">zIndex</span>: <span class=\"hljs-number\">3000</span> });\n</code></pre><p>按需引入 Hongluan UI Library：</p><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> { HlButton } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;hongluan-ui&#39;</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;./App.vue&#39;</span>;\n\n<span class=\"hljs-keyword\">const</span> app = createApp(App)\napp.config.globalProperties.$HL = option\napp.use(HlButton);\n</code></pre><p>按照以上设置，项目中所有拥有 <code>size</code> 属性的组件的默认尺寸均为 &#39;small&#39;，弹框的初始 z-index 为 3000。</p><h2 id=\"kai-shi-shi-yong\"><a class=\"header-anchor\" href=\"#kai-shi-shi-yong\"></a> 开始使用</h2><p>至此，一个基于 Vue 和 Hongluan UI Library 的开发环境已经搭建完毕，现在就可以编写代码了。各个组件的使用方法请参阅它们各自的文档。</p></div>", 1);

function render(_ctx, _cache) {
  var _component_right_nav = Object(vue_esm_browser_prod["P" /* resolveComponent */])("right-nav");

  return Object(vue_esm_browser_prod["G" /* openBlock */])(), Object(vue_esm_browser_prod["j" /* createBlock */])("section", _hoisted_1, [_hoisted_2, Object(vue_esm_browser_prod["o" /* createVNode */])(_component_right_nav)]);
}
// CONCATENATED MODULE: ./website/docs/zh-CN/quickstart.md?vue&type=template&id=87576c74

// CONCATENATED MODULE: ./website/docs/zh-CN/quickstart.md

const script = {}
script.render = render

/* harmony default export */ var quickstart = __webpack_exports__["default"] = (script);

/***/ })

}]);